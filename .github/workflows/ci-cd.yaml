name: E-Voting App CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: 122610494344.dkr.ecr.us-east-1.amazonaws.com

jobs:
  # Detect changes to optimize builds
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      vote-changed: ${{ steps.changes.outputs.vote }}
      result-changed: ${{ steps.changes.outputs.result }}
      worker-changed: ${{ steps.changes.outputs.worker }}
      k8s-changed: ${{ steps.changes.outputs.k8s }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            vote:
              - 'vote/**'
            result:
              - 'result/**'
            worker:
              - 'worker/**'
            k8s:
              - 'k8s/**'

  # Test Stage
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Start test environment
        run: |
          docker compose up -d
          sleep 30
          
      - name: Run health checks
        run: |
          echo "Checking if services are responding..."
          curl -s http://localhost:8082 || echo "Vote app not ready yet"
          curl -s http://localhost:8083 || echo "Result app not ready yet"
          echo "Services started - proceeding with tests"
          
      - name: Run integration tests
        run: |
          bash scripts/integration-tests.sh
          
      - name: Cleanup
        if: always()
        run: docker compose down -v

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.vote-changed == 'true' || needs.detect-changes.outputs.result-changed == 'true' || needs.detect-changes.outputs.worker-changed == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Build Vote Service
  build-vote:
    runs-on: ubuntu-latest
    needs: [detect-changes, test]
    if: needs.detect-changes.outputs.vote-changed == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Build and push vote image
        uses: docker/build-push-action@v5
        with:
          context: ./vote
          file: ./vote/Dockerfile
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/vote:${{ github.sha }}
            ${{ env.ECR_REGISTRY }}/vote:latest

  # Build Result Service  
  build-result:
    runs-on: ubuntu-latest
    needs: [detect-changes, test]
    if: needs.detect-changes.outputs.result-changed == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Build and push result image
        uses: docker/build-push-action@v5
        with:
          context: ./result
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/result:${{ github.sha }}
            ${{ env.ECR_REGISTRY }}/result:latest

  # Build Worker Service
  build-worker:
    runs-on: ubuntu-latest
    needs: [detect-changes, test]
    if: needs.detect-changes.outputs.worker-changed == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Build and push worker image
        uses: docker/build-push-action@v5
        with:
          context: ./worker
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/worker:${{ github.sha }}
            ${{ env.ECR_REGISTRY }}/worker:latest

  # Update K8s Manifests (GitOps)
  update-manifests:
    runs-on: ubuntu-latest
    needs: [build-vote, build-result, build-worker]
    if: always() && (needs.build-vote.result == 'success' || needs.build-result.result == 'success' || needs.build-worker.result == 'success' || needs.build-vote.result == 'skipped' || needs.build-result.result == 'skipped' || needs.build-worker.result == 'skipped')
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Update image tags in K8s manifests
        run: |
          if [[ "${{ needs.build-vote.result }}" == "success" ]]; then
            sed -i "s|${{ env.ECR_REGISTRY }}/vote:.*|${{ env.ECR_REGISTRY }}/vote:${{ github.sha }}|g" k8s/deploy-fixed.yaml
          fi
          
          if [[ "${{ needs.build-result.result }}" == "success" ]]; then
            sed -i "s|${{ env.ECR_REGISTRY }}/result:.*|${{ env.ECR_REGISTRY }}/result:${{ github.sha }}|g" k8s/deploy-fixed.yaml
          fi
          
          if [[ "${{ needs.build-worker.result }}" == "success" ]]; then
            sed -i "s|${{ env.ECR_REGISTRY }}/worker:.*|${{ env.ECR_REGISTRY }}/worker:${{ github.sha }}|g" k8s/deploy-fixed.yaml
          fi
          
      - name: Commit updated manifests
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add k8s/deploy-fixed.yaml
          git diff --staged --quiet || git commit -m "Update image tags to ${{ github.sha }}"
          git push