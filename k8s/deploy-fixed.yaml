# Redis Deployment and Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"

---
apiVersion: v1
kind: Service
metadata:
  name: redis
spec:
  selector:
    app: redis
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379

---
# PostgreSQL Deployment with Persistent Volume
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "postgres"
        - name: POSTGRES_DB
          value: "postgres"
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: postgres
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432

---
# Persistent Volume Claim for PostgreSQL
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
data:
  POSTGRES_HOST: "postgres"
  POSTGRES_DB: "postgres"
  POSTGRES_USER: "postgres"
  REDIS_HOST: "redis"

---
# Secret for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: app-cm
type: Opaque
data:
  POSTGRES_PASSWORD: cG9zdGdyZXM=  # base64 encoded "postgres"

---
# Vote App Deployment (FIXED)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vote-app
  labels:
    app: vote-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vote-app
  template:
    metadata:
      labels:
        app: vote-app
    spec:
      containers:
      - name: vote-app
        image: 427613144745.dkr.ecr.us-east-1.amazonaws.com/vote:d26f9464ffcfe9ad440f0152708ffe8a85b417f8
        ports:
        - containerPort: 80
        envFrom:
        - configMapRef:
            name: app-config
        - secretRef:
            name: app-cm
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"

---
apiVersion: v1
kind: Service
metadata:
  name: vote-app
spec:
  selector:
    app: vote-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80

---
# Result App Deployment (FIXED)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: result-app
  labels:
    app: result-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: result-app
  template:
    metadata:
      labels:
        app: result-app
    spec:
      containers:
      - name: result-app
        image: 427613144745.dkr.ecr.us-east-1.amazonaws.com/result:d26f9464ffcfe9ad440f0152708ffe8a85b417f8
        ports:
        - containerPort: 80
        envFrom:
        - configMapRef:
            name: app-config
        - secretRef:
            name: app-cm
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"

---
apiVersion: v1
kind: Service
metadata:
  name: result-app
spec:
  selector:
    app: result-app
  ports:
    - protocol: TCP
      port: 80        # FIXED: Changed from 8080 to 80
      targetPort: 80

---
# Worker App Deployment (FIXED - No service needed)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: worker-app
  labels:
    app: worker-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: worker-app
  template:
    metadata:
      labels:
        app: worker-app
    spec:
      containers:
      - name: worker-app
        image: 427613144745.dkr.ecr.us-east-1.amazonaws.com/worker:d26f9464ffcfe9ad440f0152708ffe8a85b417f8
        # REMOVED: ports section (worker doesn't need exposed ports)
        envFrom:
        - configMapRef:
            name: app-config
        - secretRef:
            name: app-cm
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"

# REMOVED: Worker service (not needed for background service)